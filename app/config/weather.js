// ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ÿ¢ÿ® Ÿà ŸáŸàÿß - API Ÿáÿß€å Ÿæÿß€åÿØÿßÿ±
export const WEATHER_CONFIG = {
  API_KEY: '7959b45847d0131c5cf5a823b1fa0d9a', // API Key ⁄©ÿßÿ±ÿ¢ŸÖÿØ
  CURRENT_WEATHER_URL: 'https://api.openweathermap.org/data/2.5/weather',
  FORECAST_URL: 'https://api.openweathermap.org/data/2.5/forecast',
  GEOCODING_URL: 'https://api.openweathermap.org/geo/1.0/direct',
  UNITS: 'metric',
  LANGUAGE: 'fa'
};

// ÿ™ÿßÿ®ÿπ ÿØÿ±€åÿßŸÅÿ™ ŸÖÿÆÿ™ÿµÿßÿ™ ÿ¥Ÿáÿ±
export const getCityCoords = async (cityName) => {
  const TEHRAN_COORDS = { lat: 35.6892, lon: 51.3890 };
  
  if (!cityName || cityName === "ÿ™Ÿáÿ±ÿßŸÜ") return TEHRAN_COORDS;
  
  try {
    const res = await fetch(
      `${WEATHER_CONFIG.GEOCODING_URL}?q=${encodeURIComponent(cityName)}&limit=1&appid=${WEATHER_CONFIG.API_KEY}`
    );
    
    if (!res.ok) return TEHRAN_COORDS;
    
    const data = await res.json();
    if (data && data.length > 0) {
      return { lat: data[0].lat, lon: data[0].lon };
    }
    return TEHRAN_COORDS;
  } catch (error) {
    console.error('Geocoding error:', error);
    return TEHRAN_COORDS;
  }
};

// ÿ™ÿßÿ®ÿπ ÿ≥ÿßÿÆÿ™ URL ÿ¢ÿ® Ÿà ŸáŸàÿß€å ŸÅÿπŸÑ€å
export const buildCurrentWeatherUrl = (lat, lon) => {
  const params = new URLSearchParams({
    lat: lat,
    lon: lon,
    appid: WEATHER_CONFIG.API_KEY,
    units: WEATHER_CONFIG.UNITS,
    lang: WEATHER_CONFIG.LANGUAGE
  });
  
  return `${WEATHER_CONFIG.CURRENT_WEATHER_URL}?${params.toString()}`;
};

// ÿ™ÿßÿ®ÿπ ÿ≥ÿßÿÆÿ™ URL Ÿæ€åÿ¥‚Äåÿ®€åŸÜ€å ÿ¢ÿ® Ÿà ŸáŸàÿß
export const buildForecastUrl = (lat, lon) => {
  const params = new URLSearchParams({
    lat: lat,
    lon: lon,
    appid: WEATHER_CONFIG.API_KEY,
    units: WEATHER_CONFIG.UNITS,
    lang: WEATHER_CONFIG.LANGUAGE
  });
  
  return `${WEATHER_CONFIG.FORECAST_URL}?${params.toString()}`;
};

// ÿ™ÿßÿ®ÿπ ÿ™ÿ®ÿØ€åŸÑ ⁄©ÿØ ÿ¢ÿ® Ÿà ŸáŸàÿß ÿ®Ÿá ÿ¢€å⁄©ŸàŸÜ
export const getWeatherIcon = (condition) => {
  const iconMap = {
    'Clear': '‚òÄÔ∏è',
    'Clouds': '‚òÅÔ∏è',
    'Rain': 'üåßÔ∏è',
    'Drizzle': 'üå¶Ô∏è',
    'Snow': '‚ùÑÔ∏è',
    'Thunderstorm': '‚õàÔ∏è',
    'Mist': 'üå´Ô∏è',
    'Fog': 'üå´Ô∏è',
    'Haze': 'üå´Ô∏è',
    'Smoke': 'üå´Ô∏è',
    'Dust': 'üå™Ô∏è',
    'Sand': 'üå™Ô∏è',
    'Ash': 'üåã',
    'Squall': 'üí®',
    'Tornado': 'üå™Ô∏è'
  };
  
  return iconMap[condition] || 'üå§Ô∏è';
};

// ÿØÿßÿØŸá‚ÄåŸáÿß€å ŸÜŸÖŸàŸÜŸá ÿ®ÿ±ÿß€å ÿ™ÿ≥ÿ™
export const getSampleWeatherData = () => ({
  current: {
    temp: 25,
    condition: 'Clear',
    description: 'ÿ¢ŸÅÿ™ÿßÿ®€å',
    humidity: 45,
    windSpeed: 3.5,
    temp_min: 18,
    temp_max: 32
  },
  forecast: [
    {
      date: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
      max: 28,
      min: 20,
      condition: 'Clear',
      description: 'ÿ¢ŸÅÿ™ÿßÿ®€å'
    },
    {
      date: new Date(Date.now() + 48 * 60 * 60 * 1000).toISOString(),
      max: 26,
      min: 19,
      condition: 'Clouds',
      description: 'ÿßÿ®ÿ±€å'
    },
    {
      date: new Date(Date.now() + 72 * 60 * 60 * 1000).toISOString(),
      max: 24,
      min: 17,
      condition: 'Rain',
      description: 'ÿ®ÿßÿ±ÿßŸÜ€å'
    },
    {
      date: new Date(Date.now() + 96 * 60 * 60 * 1000).toISOString(),
      max: 27,
      min: 21,
      condition: 'Clear',
      description: 'ÿ¢ŸÅÿ™ÿßÿ®€å'
    }
  ]
}); 